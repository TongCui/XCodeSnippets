// https://github.com/ochococo/Design-Patterns-In-Swift

**Behavioral

-> Chain of Responsibility
  The Chain of responsibility pattern is used to process varied requests, each of which may be dealt with by a different handler.
  Example: ATM - can withdraw

-> Command
  The command pattern is used to express a request, including the call to be made and all of its required parameters, in a command object. The command may then be executed immediately or held for later use.

-> Interpreter
  The interpreter pattern is used to evaluate sentences in a language.

-> Iterator
  The iterator pattern is used to provide a standard interface for traversing a collection of items in an aggregate object without the need to understand its underlying structure.

***********

struct NovelasCollection<T> {
  let novellas: [T]
}

extension NovellasCollection: SequenceType {
  typealias Generator = AnyGenerator<T>

  func generate() -> AnyGenerator<T> {
    var i = 0
    return anyGenerator{ return i >= self.novellas.count ? nil : self.novellas[i++] }
  }
}

let greatNovella = NovellasCollection(novellas: ["Mist"])

for novella in greatNovellas {
  print("I've read : \(novella)")
}


***********

-> Mediator
  The mediator pattern is used to reduce coupling between classes that communicate with each other. Instead of classes communicating directly, and thus requiring knowledge of their implementation, the classes send messages via a mediator object.


-> Memento
  The memento pattern is used to capture the current state of an object and store it in such a manner that it can be restored at a later time without breaking the rules of encapsulationg


-> Observer
  The observer pattern is used to allow an object to publish changes to its state. Other objects subscribe to be immediately notified of any changes

-> State
  The state pattern is used to alter the behaviour of an object as its internal state changes. The pattern allows the class for an object to apparently change at run-time.

-> Strategy
  The strategy pattern is used to create an interchangeable family of algorithms from which the required process is chosen at run-time

-> Visitor
  The visitor pattern is used to separate a relatively complex set of structured data classes from the functionality that may be performed upon the data that they hold.


** Creational

-> Abstract Factory
  The abstract factory pattern is used to provide a client with a set of related or dependant objects. The "family" of objects created by the factory are determined at run-time.

-> Builder
  The builder pattern is used to create complex objects with constituent parts that must be created in the same order or using a specific algorithm. An external class controls the construction algorithm.

-> Factory Method
  The factory pattern is used to replace class constructors, abstracting the process of object generation so that the type of the object instantiated can be determined at run-time.

-> Prototype
  The prototype pattern is used to instantiate a new object by copying all the properties of an existing object, creating an independent clone. This practise is particularly useful when the construction of a new object is inefficient.

-> Singleton
  The singleton pattern ensures that only one object of a particular class is ever created. All further references to objects of the singleton class refer to the same underlying instance. There are very few applications, do not overuse this pattern!

** Structural

-> Adapter
  The adapter pattern is used to provide a link between two otherwise incompatible types by wrapping the "adaptee" with a class that supports the interface required by the client

-> Bridge
  The bridge pattern is used to separate the abstract elements of a class from the implementation details, providing the means to replace the implementation details without modifying the abstraction.

-> Composite
  The composite pattern is used to create hierarchical, recursive tree structures of related objects where any element of the structure may be accessed and utilised in a standard manner.

-> Decorator
  The decorator pattern is used to extend or alter the functionality of objects at run-time by wrapping them in an object of a decorator class. This provides a flexible alternative to using inheritance to modify behaviour.

-> Facade
  The facade pattern is used to define a simplified interface to a more complex subsystem.

-> Protection Proxy
  The Proxy pattern is used to provide a surrogate or placeholder object, which references an underlying object. Protection proxy is restricting access.

-> Virtual Proxy
  The proxy pattern is used to provide a surrogate or placeholder object, which references an underlying object. Virtual proxy is used for loading object on demand.



//  http://www.cnblogs.com/beijiguangyong/archive/2010/11/15/2302807.html 中文

//  一个很好的中文解释
//  http://www.runoob.com/design-pattern/factory-pattern.html
//  
